{"version":3,"sources":["constants/index.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_QUERY","largeColumn","width","midColumn","smallColumn","library","add","faIgloo","SORTS","NONE","list","TITLE","sortBy","AUTHOR","COMMENTS","reverse","POINTS","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_isMounted","state","results","searchKey","searchTerm","error","isLoading","onDismiss","bind","assertThisInitialized","onSearchChange","setSearchTopStories","onSearchSubmit","fetchSearchTopStories","needsToSearchTopStories","id","_this$state","_results$searchKey","hits","page","updatedHits","filter","item","objectID","setState","objectSpread","defineProperty","_this2","arguments","length","undefined","axios","concat","then","result","data","catch","event","target","value","preventDefault","prevState","oldHits","toConsumableArray","updateSearchTopStoriesState","_this3","_this$state2","react_default","a","createElement","className","App_Search","onChange","onSubmit","App_Table","ButtonWithLoading","onClick","Component","Loading","react_fontawesome_index_es","icon","Search","input","focus","_this4","_this$props","children","type","ref","el","Sort","_ref","sortKey","activeSortKey","onSort","sortClass","classNames","button-active","App_Button","Table","_this5","isSortReverse","_this$props2","_this$state3","sortedList","reverseSortedList","style","App_Sort","map","key","href","url","title","author","num_comments","points","Button","_ref2","defaultProps","App_Loading","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6769bcd.chunk.js","sourcesContent":["export const DEFAULT_QUERY = 'redux';\nexport const DEFAULT_HPP = '100';\nexport const PATH_BASE = 'https://hn.algolia.com/api/v1';\nexport const PATH_SEARCH = '/search';\nexport const PARAM_SEARCH = 'query=';\nexport const PARAM_PAGE = 'page=';\nexport const PARAM_HPP = 'hitsPerPage=';","import React, {Component} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faIgloo} from '@fortawesome/free-solid-svg-icons';\nimport {sortBy} from 'lodash';\nimport classNames from 'classnames';\nimport {\n    DEFAULT_QUERY,\n    DEFAULT_HPP,\n    PATH_BASE,\n    PATH_SEARCH,\n    PARAM_SEARCH,\n    PARAM_PAGE,\n    PARAM_HPP,\n} from './constants';\n\nconst largeColumn = {\n    width: '40%',\n};\nconst midColumn = {\n    width: '30%',\n};\nconst smallColumn = {\n    width: '10%',\n};\n\nlibrary.add(faIgloo);\nconst SORTS = {\n    NONE: list => list,\n    TITLE: list => sortBy(list, 'title'),\n    AUTHOR: list => sortBy(list, 'author'),\n    COMMENTS: list => sortBy(list, 'num_comments').reverse(),\n    POINTS: list => sortBy(list, 'points').reverse(),\n};\nconst updateSearchTopStoriesState = (hits, page) => (prevState) => {\n    const { searchKey, results } = prevState;\n    const oldHits = results && results[searchKey]\n        ? results[searchKey].hits\n        : [];\n    const updatedHits = [\n        ...oldHits,\n        ...hits\n    ];\n    return {\n        results: {\n            ...results,\n            [searchKey]: { hits: updatedHits, page }\n        },\n        isLoading: false\n    };\n};\nclass App extends Component {\n    _isMounted = false;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            results: null,\n            searchKey: '',\n            searchTerm: DEFAULT_QUERY,\n            error: null,\n            isLoading: false,\n        };\n        this.onDismiss = this.onDismiss.bind(this);\n        this.onSearchChange = this.onSearchChange.bind(this);\n        this.setSearchTopStories = this.setSearchTopStories.bind(this);\n        this.onSearchSubmit = this.onSearchSubmit.bind(this);\n        this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this);\n        this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this);\n    }\n\n    needsToSearchTopStories(searchTerm) {\n        return !this.state.results[searchTerm];\n    }\n\n    onDismiss(id) {\n        const {searchKey, results} = this.state;\n        const {hits, page} = results[searchKey];\n\n        const isNotId = item => item.objectID !== id;\n        const updatedHits = hits.filter(isNotId);\n        this.setState({\n            results: {\n                ...results,\n                [searchKey]: {hits: updatedHits, page}\n            }\n        });\n    }\n\n    fetchSearchTopStories(searchTerm, page = 0) {\n        this.setState({isLoading: true});\n        axios(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n            .then(result => this._isMounted && this.setSearchTopStories(result.data))\n            .catch(error => this._isMounted && this.setState({error}));\n    }\n\n    onSearchChange(event) {\n        this.setState({searchTerm: event.target.value});\n    }\n\n    onSearchSubmit(event) {\n        const {searchTerm} = this.state;\n        this.setState({searchKey: searchTerm});\n        if (this.needsToSearchTopStories(searchTerm)) {\n            this.fetchSearchTopStories(searchTerm);\n        }\n        event.preventDefault();\n    }\n\n    setSearchTopStories(result) {\n        const {hits, page} = result;\n        this.setState(updateSearchTopStoriesState(hits, page));\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n        const {searchTerm} = this.state;\n        this.setState({searchKey: searchTerm});\n        this.fetchSearchTopStories(searchTerm);\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    render() {\n        const {\n            searchTerm,\n            results,\n            searchKey,\n            error,\n            isLoading,\n        } = this.state;\n        const page = (\n            results &&\n            results[searchKey] &&\n            results[searchKey].page\n        ) || 0;\n        const list = (\n            results &&\n            results[searchKey] &&\n            results[searchKey].hits\n        ) || [];\n        return (\n            <div className=\"page\">\n                <div className=\"interactions\">\n                    <Search\n                        value={searchTerm}\n                        onChange={this.onSearchChange}\n                        onSubmit={this.onSearchSubmit}\n                    ></Search>\n                </div>\n                {error\n                    ? <div className=\"interactions\">\n                        <p>Something went wrong.</p>\n                    </div>\n                    :\n                    <Table\n                        list={list}\n                        onDismiss={this.onDismiss}\n                    />\n                }\n                <div className=\"interactions\">\n                    <ButtonWithLoading\n                        isLoading={isLoading}\n                        onClick={() => this.fetchSearchTopStories(searchKey, page + 1)}\n                    >\n                        More\n                    </ButtonWithLoading>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst Loading = () =>\n    <FontAwesomeIcon icon=\"igloo\"/>\nconst withLoading = (Component) => (props) =>\n    props.isLoading\n        ? <Loading/>\n        : <Component {...props} />\n\nclass Search extends Component {\n    componentDidMount() {\n        if (this.input) {\n            this.input.focus();\n        }\n    }\n\n    render() {\n        const {\n            value,\n            onChange,\n            onSubmit,\n            children\n        } = this.props;\n\n        return (\n            <form onSubmit={onSubmit}>\n                {children}\n                <input\n                    type=\"text\"\n                    value={value}\n                    onChange={onChange}\n                    ref={el => this.input = el}\n                />\n                <button type=\"submit\">\n                    Search\n                </button>\n            </form>\n        );\n    }\n}\n\nSearch.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n    onSubmit: PropTypes.func,\n    children: PropTypes.string\n};\nconst Sort = ({ sortKey, activeSortKey, onSort, children }) => {\n    const sortClass = classNames(\n        'button-inline',\n        { 'button-active': sortKey === activeSortKey }\n    );\n    return (\n        <Button\n            onClick={() => onSort(sortKey)}\n            className={sortClass}\n        >\n            {children}\n        </Button>\n    );\n}\nclass Table extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sortKey: 'NONE',\n            isSortReverse: false,\n        };\n        this.onSort = this.onSort.bind(this);\n    }\n    onSort(sortKey) {\n        const isSortReverse = this.state.sortKey === sortKey &&\n            !this.state.isSortReverse;\n        this.setState({ sortKey, isSortReverse });\n    }\n    render() {\n        const {\n            list,\n            onDismiss\n        } = this.props;\n        const {\n            sortKey,\n            isSortReverse,\n        } = this.state;\n            const sortedList = SORTS[sortKey](list);\n            const reverseSortedList = isSortReverse\n                ? sortedList.reverse()\n                : sortedList;\n\n            return (\n                <div className=\"table\">\n                    <div className=\"table-header\">\n            <span style={{width: '40%'}}>\n                <Sort\n                    sortKey={'TITLE'}\n                    onSort={this.onSort}\n                    activeSortKey={sortKey}\n                >\n                    Title\n                </Sort>\n            </span>\n                        <span style={{width: '30%'}}>\n                <Sort\n                    sortKey={'AUTHOR'}\n                    onSort={this.onSort}\n                    activeSortKey={sortKey}\n                >\n                    Author\n                </Sort>\n            </span>\n                        <span style={{width: '10%'}}>\n                <Sort\n                    sortKey={'COMMENTS'}\n                    onSort={this.onSort}\n                    activeSortKey={sortKey}\n                >\n                    Comments\n                </Sort>\n            </span>\n                        <span style={{width: '10%'}}>\n                <Sort\n                    sortKey={'POINTS'}\n                    onSort={this.onSort}\n                    activeSortKey={sortKey}\n                >\n                    Points\n                </Sort>\n            </span>\n                        <span style={{width: '10%'}}>\n                Archive\n            </span>\n                    </div>\n                    {reverseSortedList.map(item =>\n                            <div key={item.objectID} className=\"table-row\">\n                    <span style={largeColumn}>\n                        <a href={item.url}>{item.title}</a>\n                    </span>\n                                <span style={midColumn}>\n                        {item.author}\n                    </span>\n                                <span style={smallColumn}>\n                        {item.num_comments}\n                    </span>\n                                <span style={smallColumn}>\n                        {item.points}\n                    </span>\n                                <span style={smallColumn}>\n                        <Button\n                            onClick={() => onDismiss(item.objectID)}\n                            className=\"button-inline\"\n                        >\n                            Dismiss\n                        </Button>\n                    </span>\n                            </div>\n                    )}\n                </div>\n            )}\n    }\nTable.propTypes = {\n    list: PropTypes.arrayOf(\n        PropTypes.shape({\n            objectID: PropTypes.string.isRequired,\n            author: PropTypes.string,\n            url: PropTypes.string,\n            num_comments: PropTypes.number,\n            points: PropTypes.number,\n        })\n    ).isRequired,\n    onDismiss: PropTypes.func.isRequired,\n};\nconst Button = ({onClick,className,children}) =>\n    <button\n        onClick={onClick}\n        className={className}\n        type=\"button\"\n    >\n        {children}\n    </button>\nButton.propTypes = {\n    onClick: PropTypes.func.isRequired,\n    className: PropTypes.string,\n    children: PropTypes.node.isRequired,\n};\nButton.defaultProps = {\n    className: ''\n};\nconst ButtonWithLoading = withLoading(Button);\nexport default App;\nexport {\n    Button,\n    Search,\n    Table,\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\nif (module.hot) {\n    module.hot.accept();\n}"],"sourceRoot":""}